{"version":"15.0.4","vulnerabilities":[{"id":"090511a28a96243222bbfed4a81b163ef86e6b7505b73fb24a7a713efc3efbe0","category":"sast","name":"Improper neutralization of directives in dynamically evaluated code ('Eval Injection')","description":"The application was found calling the `eval` function with a non-literal variable. If the\nvariable comes from user-supplied input, an adversary could attempt to execute arbitrary\nJavaScript\ncode. This could lead to a full system compromise in Node applications or Cross-site Scripting\n(XSS) in web applications.\n\nTo remediate this issue, remove all calls to `eval` and consider alternative methods for\nexecuting\nthe necessary business logic. There is almost no safe method of calling `eval` with\nuser-supplied input.\nInstead, consider alternative methods such as using property accessors to dynamically access\nvalues.\n\nExample using property accessors to dynamically access an object's property:\n```\n// Define an object\nconst obj = {key1: 'value1', key2: 'value2'};\n// Get key dynamically from user input\nconst key = getUserInput();\n// Check if the key exists in our object and return it, or a default empty string\nconst value = (obj.hasOwnProperty(key)) ? obj[key] : '';\n// Work with the value\n```\n\nFor more information on why not to use `eval`, and alternatives see:\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!\n","cve":"semgrep_id:eslint.detect-eval-with-expression:23:23","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"routes/captcha.ts","start_line":23},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-eval-with-expression","value":"eslint.detect-eval-with-expression","url":"https://semgrep.dev/r/gitlab.eslint.detect-eval-with-expression"},{"type":"cwe","name":"CWE-95","value":"95","url":"https://cwe.mitre.org/data/definitions/95.html"},{"type":"owasp","name":"A1:2017 - Injection","value":"A1:2017"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-eval-with-expression","value":"detect-eval-with-expression"}]},{"id":"e9144c898a92ae099ff4eba7787da5bb6247dd0b24ca88d27567938ff415a314","category":"sast","name":"Improper neutralization of directives in dynamically evaluated code ('Eval Injection')","description":"The application was found calling the `eval` function with a non-literal variable. If the\nvariable comes from user-supplied input, an adversary could attempt to execute arbitrary\nJavaScript\ncode. This could lead to a full system compromise in Node applications or Cross-site Scripting\n(XSS) in web applications.\n\nTo remediate this issue, remove all calls to `eval` and consider alternative methods for\nexecuting\nthe necessary business logic. There is almost no safe method of calling `eval` with\nuser-supplied input.\nInstead, consider alternative methods such as using property accessors to dynamically access\nvalues.\n\nExample using property accessors to dynamically access an object's property:\n```\n// Define an object\nconst obj = {key1: 'value1', key2: 'value2'};\n// Get key dynamically from user input\nconst key = getUserInput();\n// Check if the key exists in our object and return it, or a default empty string\nconst value = (obj.hasOwnProperty(key)) ? obj[key] : '';\n// Work with the value\n```\n\nFor more information on why not to use `eval`, and alternatives see:\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!\n","cve":"semgrep_id:eslint.detect-eval-with-expression:258:258","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"test/cypress/e2e/contact.spec.ts","start_line":258},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-eval-with-expression","value":"eslint.detect-eval-with-expression","url":"https://semgrep.dev/r/gitlab.eslint.detect-eval-with-expression"},{"type":"cwe","name":"CWE-95","value":"95","url":"https://cwe.mitre.org/data/definitions/95.html"},{"type":"owasp","name":"A1:2017 - Injection","value":"A1:2017"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-eval-with-expression","value":"detect-eval-with-expression"}]},{"id":"d43519cc023539de748d9de78577306ec9385b18dbf5ec0bc5de77cf567ec5d8","category":"sast","name":"Improper neutralization of directives in dynamically evaluated code ('Eval Injection')","description":"The application was found calling the `eval` function with a non-literal variable. If the\nvariable comes from user-supplied input, an adversary could attempt to execute arbitrary\nJavaScript\ncode. This could lead to a full system compromise in Node applications or Cross-site Scripting\n(XSS) in web applications.\n\nTo remediate this issue, remove all calls to `eval` and consider alternative methods for\nexecuting\nthe necessary business logic. There is almost no safe method of calling `eval` with\nuser-supplied input.\nInstead, consider alternative methods such as using property accessors to dynamically access\nvalues.\n\nExample using property accessors to dynamically access an object's property:\n```\n// Define an object\nconst obj = {key1: 'value1', key2: 'value2'};\n// Get key dynamically from user input\nconst key = getUserInput();\n// Check if the key exists in our object and return it, or a default empty string\nconst value = (obj.hasOwnProperty(key)) ? obj[key] : '';\n// Work with the value\n```\n\nFor more information on why not to use `eval`, and alternatives see:\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!\n","cve":"semgrep_id:eslint.detect-eval-with-expression:36:36","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"routes/userProfile.ts","start_line":36},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-eval-with-expression","value":"eslint.detect-eval-with-expression","url":"https://semgrep.dev/r/gitlab.eslint.detect-eval-with-expression"},{"type":"cwe","name":"CWE-95","value":"95","url":"https://cwe.mitre.org/data/definitions/95.html"},{"type":"owasp","name":"A1:2017 - Injection","value":"A1:2017"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-eval-with-expression","value":"detect-eval-with-expression"}]},{"id":"41b9cc845edc7024ba26e2eb2945705465f5e4c51f534e82861ed6a328ea44da","category":"sast","name":"Improper limitation of a pathname to a restricted directory ('Path Traversal')","description":"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(\"Invalid path specified!\");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n","cve":"semgrep_id:eslint.detect-non-literal-fs-filename:103:103","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"rsn/rsnUtil.ts","start_line":103},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-fs-filename","value":"eslint.detect-non-literal-fs-filename","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename"},{"type":"cwe","name":"CWE-22","value":"22","url":"https://cwe.mitre.org/data/definitions/22.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-fs-filename","value":"detect-non-literal-fs-filename"}]},{"id":"ace00c5c63002a8305f04749a1037f9a1e950899e42bbfda14ba31d7ffdd68af","category":"sast","name":"Improper limitation of a pathname to a restricted directory ('Path Traversal')","description":"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(\"Invalid path specified!\");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n","cve":"semgrep_id:eslint.detect-non-literal-fs-filename:109:109","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"test/api/fileUploadSpec.ts","start_line":109},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-fs-filename","value":"eslint.detect-non-literal-fs-filename","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename"},{"type":"cwe","name":"CWE-22","value":"22","url":"https://cwe.mitre.org/data/definitions/22.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-fs-filename","value":"detect-non-literal-fs-filename"}]},{"id":"96a1d1fef19d14db51a2f1fb7beb375936f36382ee84a22b8410250144d461cb","category":"sast","name":"Improper limitation of a pathname to a restricted directory ('Path Traversal')","description":"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(\"Invalid path specified!\");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n","cve":"semgrep_id:eslint.detect-non-literal-fs-filename:123:123","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"test/api/fileUploadSpec.ts","start_line":123},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-fs-filename","value":"eslint.detect-non-literal-fs-filename","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename"},{"type":"cwe","name":"CWE-22","value":"22","url":"https://cwe.mitre.org/data/definitions/22.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-fs-filename","value":"detect-non-literal-fs-filename"}]},{"id":"6864d96224dd816127d28213f91abc5601c3b6deac279d4f9c1f632313142ed2","category":"sast","name":"Improper limitation of a pathname to a restricted directory ('Path Traversal')","description":"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(\"Invalid path specified!\");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n","cve":"semgrep_id:eslint.detect-non-literal-fs-filename:131:131","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"lib/utils.ts","start_line":131},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-fs-filename","value":"eslint.detect-non-literal-fs-filename","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename"},{"type":"cwe","name":"CWE-22","value":"22","url":"https://cwe.mitre.org/data/definitions/22.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-fs-filename","value":"detect-non-literal-fs-filename"}]},{"id":"418d9c0825087ec1b60de6dc9935e86ba2e3378446b1210093f7fa62ba542a3f","category":"sast","name":"Improper limitation of a pathname to a restricted directory ('Path Traversal')","description":"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(\"Invalid path specified!\");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n","cve":"semgrep_id:eslint.detect-non-literal-fs-filename:136:136","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"test/api/fileUploadSpec.ts","start_line":136},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-fs-filename","value":"eslint.detect-non-literal-fs-filename","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename"},{"type":"cwe","name":"CWE-22","value":"22","url":"https://cwe.mitre.org/data/definitions/22.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-fs-filename","value":"detect-non-literal-fs-filename"}]},{"id":"cfc1ef7fee337eccca875bc4b0dca782fa4ae16f650cc60a1f9f3b3e7643e9b1","category":"sast","name":"Improper limitation of a pathname to a restricted directory ('Path Traversal')","description":"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(\"Invalid path specified!\");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n","cve":"semgrep_id:eslint.detect-non-literal-fs-filename:146:146","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"test/api/fileUploadSpec.ts","start_line":146},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-fs-filename","value":"eslint.detect-non-literal-fs-filename","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename"},{"type":"cwe","name":"CWE-22","value":"22","url":"https://cwe.mitre.org/data/definitions/22.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-fs-filename","value":"detect-non-literal-fs-filename"}]},{"id":"8bf48b7f14e98eef9c1638ea81be3b6d1dd27a3f0e7ed40205d4f69b54598a8f","category":"sast","name":"Improper limitation of a pathname to a restricted directory ('Path Traversal')","description":"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(\"Invalid path specified!\");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n","cve":"semgrep_id:eslint.detect-non-literal-fs-filename:156:156","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"test/api/fileUploadSpec.ts","start_line":156},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-fs-filename","value":"eslint.detect-non-literal-fs-filename","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename"},{"type":"cwe","name":"CWE-22","value":"22","url":"https://cwe.mitre.org/data/definitions/22.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-fs-filename","value":"detect-non-literal-fs-filename"}]},{"id":"10c92caf79267e9f2dff8ebd5d5b9490d536e124d98a05e49618a9cb37fb323f","category":"sast","name":"Improper limitation of a pathname to a restricted directory ('Path Traversal')","description":"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(\"Invalid path specified!\");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n","cve":"semgrep_id:eslint.detect-non-literal-fs-filename:188:188","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"test/api/dataExportApiSpec.ts","start_line":188},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-fs-filename","value":"eslint.detect-non-literal-fs-filename","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename"},{"type":"cwe","name":"CWE-22","value":"22","url":"https://cwe.mitre.org/data/definitions/22.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-fs-filename","value":"detect-non-literal-fs-filename"}]},{"id":"c81d21fbd8bc0136d525357c2382f92f1eb3f5274d46dc7fa8e32027a01f377e","category":"sast","name":"Improper limitation of a pathname to a restricted directory ('Path Traversal')","description":"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(\"Invalid path specified!\");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n","cve":"semgrep_id:eslint.detect-non-literal-fs-filename:18:18","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"test/api/fileUploadSpec.ts","start_line":18},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-fs-filename","value":"eslint.detect-non-literal-fs-filename","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename"},{"type":"cwe","name":"CWE-22","value":"22","url":"https://cwe.mitre.org/data/definitions/22.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-fs-filename","value":"detect-non-literal-fs-filename"}]},{"id":"cd81f47945767bcf981b56b5be31754bbe92e7d9e8a17ceb645da30e4462e806","category":"sast","name":"Improper limitation of a pathname to a restricted directory ('Path Traversal')","description":"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(\"Invalid path specified!\");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n","cve":"semgrep_id:eslint.detect-non-literal-fs-filename:19:19","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"test/api/profileImageUploadSpec.ts","start_line":19},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-fs-filename","value":"eslint.detect-non-literal-fs-filename","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename"},{"type":"cwe","name":"CWE-22","value":"22","url":"https://cwe.mitre.org/data/definitions/22.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-fs-filename","value":"detect-non-literal-fs-filename"}]},{"id":"c0b4e0c5aa666aa5c726c23aeeea0a07c43a132db08a02afeecc5d31a74b8a7b","category":"sast","name":"Improper limitation of a pathname to a restricted directory ('Path Traversal')","description":"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(\"Invalid path specified!\");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n","cve":"semgrep_id:eslint.detect-non-literal-fs-filename:21:21","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"lib/codingChallenges.ts","start_line":21},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-fs-filename","value":"eslint.detect-non-literal-fs-filename","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename"},{"type":"cwe","name":"CWE-22","value":"22","url":"https://cwe.mitre.org/data/definitions/22.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-fs-filename","value":"detect-non-literal-fs-filename"}]},{"id":"86e8ba428887cf34cc46888b0bc75de69c42c1b21ed8d4594bffdf4d3f0b7c2a","category":"sast","name":"Improper limitation of a pathname to a restricted directory ('Path Traversal')","description":"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(\"Invalid path specified!\");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n","cve":"semgrep_id:eslint.detect-non-literal-fs-filename:22:22","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"lib/codingChallenges.ts","start_line":22},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-fs-filename","value":"eslint.detect-non-literal-fs-filename","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename"},{"type":"cwe","name":"CWE-22","value":"22","url":"https://cwe.mitre.org/data/definitions/22.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-fs-filename","value":"detect-non-literal-fs-filename"}]},{"id":"0d13ecdc06110ad03724565bbe4eb4803d0d45fe87069a551ea1f5529ddede57","category":"sast","name":"Improper limitation of a pathname to a restricted directory ('Path Traversal')","description":"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(\"Invalid path specified!\");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n","cve":"semgrep_id:eslint.detect-non-literal-fs-filename:28:28","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"routes/vulnCodeFixes.ts","start_line":28},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-fs-filename","value":"eslint.detect-non-literal-fs-filename","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename"},{"type":"cwe","name":"CWE-22","value":"22","url":"https://cwe.mitre.org/data/definitions/22.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-fs-filename","value":"detect-non-literal-fs-filename"}]},{"id":"112434bdc1201e60514a2f6c337a821af63e0d4a1428cb5650992862972e40d6","category":"sast","name":"Improper limitation of a pathname to a restricted directory ('Path Traversal')","description":"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(\"Invalid path specified!\");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n","cve":"semgrep_id:eslint.detect-non-literal-fs-filename:28:28","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"test/api/fileUploadSpec.ts","start_line":28},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-fs-filename","value":"eslint.detect-non-literal-fs-filename","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename"},{"type":"cwe","name":"CWE-22","value":"22","url":"https://cwe.mitre.org/data/definitions/22.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-fs-filename","value":"detect-non-literal-fs-filename"}]},{"id":"5511645600103dca577eb88ce70db15ca89591418e97bb4e784ff2f11da6179e","category":"sast","name":"Improper limitation of a pathname to a restricted directory ('Path Traversal')","description":"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(\"Invalid path specified!\");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n","cve":"semgrep_id:eslint.detect-non-literal-fs-filename:29:29","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"lib/codingChallenges.ts","start_line":29},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-fs-filename","value":"eslint.detect-non-literal-fs-filename","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename"},{"type":"cwe","name":"CWE-22","value":"22","url":"https://cwe.mitre.org/data/definitions/22.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-fs-filename","value":"detect-non-literal-fs-filename"}]},{"id":"2cd22b109975d4e584017099aff2a2a99aa4dbeb538b08cde6ee92b6080822d9","category":"sast","name":"Improper limitation of a pathname to a restricted directory ('Path Traversal')","description":"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(\"Invalid path specified!\");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n","cve":"semgrep_id:eslint.detect-non-literal-fs-filename:326:326","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"test/api/dataExportApiSpec.ts","start_line":326},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-fs-filename","value":"eslint.detect-non-literal-fs-filename","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename"},{"type":"cwe","name":"CWE-22","value":"22","url":"https://cwe.mitre.org/data/definitions/22.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-fs-filename","value":"detect-non-literal-fs-filename"}]},{"id":"bc8a202ae18c1da27a121cb1f8dbec49e6a1d7c937a1a088e4cedc6c4ccb3e23","category":"sast","name":"Improper limitation of a pathname to a restricted directory ('Path Traversal')","description":"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(\"Invalid path specified!\");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n","cve":"semgrep_id:eslint.detect-non-literal-fs-filename:32:32","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"routes/chatbot.ts","start_line":32},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-fs-filename","value":"eslint.detect-non-literal-fs-filename","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename"},{"type":"cwe","name":"CWE-22","value":"22","url":"https://cwe.mitre.org/data/definitions/22.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-fs-filename","value":"detect-non-literal-fs-filename"}]},{"id":"f55c584e00024ffe93955b880af9da5ffd215d0f6d8116d19b07ed1d836d6e3e","category":"sast","name":"Improper limitation of a pathname to a restricted directory ('Path Traversal')","description":"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(\"Invalid path specified!\");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n","cve":"semgrep_id:eslint.detect-non-literal-fs-filename:35:35","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"test/api/metricsApiSpec.ts","start_line":35},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-fs-filename","value":"eslint.detect-non-literal-fs-filename","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename"},{"type":"cwe","name":"CWE-22","value":"22","url":"https://cwe.mitre.org/data/definitions/22.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-fs-filename","value":"detect-non-literal-fs-filename"}]},{"id":"c5bd354102be13d8ab5cba1548068dc0df5d33a55fa1c3ea4ac45f25f4a2e0ad","category":"sast","name":"Improper limitation of a pathname to a restricted directory ('Path Traversal')","description":"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(\"Invalid path specified!\");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n","cve":"semgrep_id:eslint.detect-non-literal-fs-filename:37:37","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"test/api/chatBotSpec.ts","start_line":37},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-fs-filename","value":"eslint.detect-non-literal-fs-filename","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename"},{"type":"cwe","name":"CWE-22","value":"22","url":"https://cwe.mitre.org/data/definitions/22.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-fs-filename","value":"detect-non-literal-fs-filename"}]},{"id":"ee85201d3a6a74d760c9ff61d3581b5f66954564f3c12b9389358b9f8dcc2ce7","category":"sast","name":"Improper limitation of a pathname to a restricted directory ('Path Traversal')","description":"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(\"Invalid path specified!\");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n","cve":"semgrep_id:eslint.detect-non-literal-fs-filename:38:38","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"test/api/fileUploadSpec.ts","start_line":38},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-fs-filename","value":"eslint.detect-non-literal-fs-filename","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename"},{"type":"cwe","name":"CWE-22","value":"22","url":"https://cwe.mitre.org/data/definitions/22.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-fs-filename","value":"detect-non-literal-fs-filename"}]},{"id":"85ba6772434a05e6d608ecd84cce1134bd20b28a8652f1f5cac906bfb1b7191c","category":"sast","name":"Improper limitation of a pathname to a restricted directory ('Path Traversal')","description":"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(\"Invalid path specified!\");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n","cve":"semgrep_id:eslint.detect-non-literal-fs-filename:41:41","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"test/server/blueprintSpec.ts","start_line":41},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-fs-filename","value":"eslint.detect-non-literal-fs-filename","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename"},{"type":"cwe","name":"CWE-22","value":"22","url":"https://cwe.mitre.org/data/definitions/22.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-fs-filename","value":"detect-non-literal-fs-filename"}]},{"id":"73f71e2eb98dffe02265beadc13a8d5e53a9dff7a6b7a9303638baf6d901f25b","category":"sast","name":"Improper limitation of a pathname to a restricted directory ('Path Traversal')","description":"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(\"Invalid path specified!\");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n","cve":"semgrep_id:eslint.detect-non-literal-fs-filename:41:41","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"routes/chatbot.ts","start_line":41},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-fs-filename","value":"eslint.detect-non-literal-fs-filename","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename"},{"type":"cwe","name":"CWE-22","value":"22","url":"https://cwe.mitre.org/data/definitions/22.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-fs-filename","value":"detect-non-literal-fs-filename"}]},{"id":"4928fb5adce2d851feb8b98de7382899a6c1ed3df9ddff1fafd167d4d5a6a05e","category":"sast","name":"Improper limitation of a pathname to a restricted directory ('Path Traversal')","description":"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(\"Invalid path specified!\");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n","cve":"semgrep_id:eslint.detect-non-literal-fs-filename:41:41","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"test/api/memoryApiSpec.ts","start_line":41},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-fs-filename","value":"eslint.detect-non-literal-fs-filename","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename"},{"type":"cwe","name":"CWE-22","value":"22","url":"https://cwe.mitre.org/data/definitions/22.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-fs-filename","value":"detect-non-literal-fs-filename"}]},{"id":"0b1812f63bb919f1f6cfe3f99d7410d5ddc9034bd9af20cb654c3436fb3e398a","category":"sast","name":"Improper limitation of a pathname to a restricted directory ('Path Traversal')","description":"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(\"Invalid path specified!\");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n","cve":"semgrep_id:eslint.detect-non-literal-fs-filename:46:46","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"routes/order.ts","start_line":46},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-fs-filename","value":"eslint.detect-non-literal-fs-filename","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename"},{"type":"cwe","name":"CWE-22","value":"22","url":"https://cwe.mitre.org/data/definitions/22.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-fs-filename","value":"detect-non-literal-fs-filename"}]},{"id":"5cf339d0d69c7aff427b39a80415101cdd5728238f175e68caaa7ffb4dfe6fcc","category":"sast","name":"Improper limitation of a pathname to a restricted directory ('Path Traversal')","description":"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(\"Invalid path specified!\");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n","cve":"semgrep_id:eslint.detect-non-literal-fs-filename:46:46","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"test/api/profileImageUploadSpec.ts","start_line":46},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-fs-filename","value":"eslint.detect-non-literal-fs-filename","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename"},{"type":"cwe","name":"CWE-22","value":"22","url":"https://cwe.mitre.org/data/definitions/22.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-fs-filename","value":"detect-non-literal-fs-filename"}]},{"id":"329c05950bb2877f7131fb068181d04af944189d6f29d0f1cb0fd916b58705ac","category":"sast","name":"Improper limitation of a pathname to a restricted directory ('Path Traversal')","description":"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(\"Invalid path specified!\");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n","cve":"semgrep_id:eslint.detect-non-literal-fs-filename:48:48","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"rsn/rsnUtil.ts","start_line":48},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-fs-filename","value":"eslint.detect-non-literal-fs-filename","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename"},{"type":"cwe","name":"CWE-22","value":"22","url":"https://cwe.mitre.org/data/definitions/22.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-fs-filename","value":"detect-non-literal-fs-filename"}]},{"id":"2caf5e6221af66cb923dd90275e8b83ca361aa0519e0ea4dfe485ceb33f9fa70","category":"sast","name":"Improper limitation of a pathname to a restricted directory ('Path Traversal')","description":"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(\"Invalid path specified!\");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n","cve":"semgrep_id:eslint.detect-non-literal-fs-filename:48:48","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"test/api/fileUploadSpec.ts","start_line":48},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-fs-filename","value":"eslint.detect-non-literal-fs-filename","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename"},{"type":"cwe","name":"CWE-22","value":"22","url":"https://cwe.mitre.org/data/definitions/22.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-fs-filename","value":"detect-non-literal-fs-filename"}]},{"id":"807fe2fb0091f8b8eb362dc169b022284103c4ad96b6411a4759f6c1f4e725fc","category":"sast","name":"Improper limitation of a pathname to a restricted directory ('Path Traversal')","description":"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(\"Invalid path specified!\");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n","cve":"semgrep_id:eslint.detect-non-literal-fs-filename:51:51","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"test/api/metricsApiSpec.ts","start_line":51},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-fs-filename","value":"eslint.detect-non-literal-fs-filename","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename"},{"type":"cwe","name":"CWE-22","value":"22","url":"https://cwe.mitre.org/data/definitions/22.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-fs-filename","value":"detect-non-literal-fs-filename"}]},{"id":"96678e4486feff577a7c052598e13e6ec0beb46931440a513079ca093642de4d","category":"sast","name":"Improper limitation of a pathname to a restricted directory ('Path Traversal')","description":"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(\"Invalid path specified!\");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n","cve":"semgrep_id:eslint.detect-non-literal-fs-filename:57:57","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"test/api/memoryApiSpec.ts","start_line":57},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-fs-filename","value":"eslint.detect-non-literal-fs-filename","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename"},{"type":"cwe","name":"CWE-22","value":"22","url":"https://cwe.mitre.org/data/definitions/22.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-fs-filename","value":"detect-non-literal-fs-filename"}]},{"id":"b1513c17fe41fc78b4ba16255fff3ee15959f64377714e5003bc524106d64fc2","category":"sast","name":"Improper limitation of a pathname to a restricted directory ('Path Traversal')","description":"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(\"Invalid path specified!\");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n","cve":"semgrep_id:eslint.detect-non-literal-fs-filename:58:58","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"test/api/fileUploadSpec.ts","start_line":58},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-fs-filename","value":"eslint.detect-non-literal-fs-filename","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename"},{"type":"cwe","name":"CWE-22","value":"22","url":"https://cwe.mitre.org/data/definitions/22.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-fs-filename","value":"detect-non-literal-fs-filename"}]},{"id":"39fc8d8c684a34c31757fa98761b7071590ce785bc514909797044376dc9361f","category":"sast","name":"Improper limitation of a pathname to a restricted directory ('Path Traversal')","description":"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(\"Invalid path specified!\");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n","cve":"semgrep_id:eslint.detect-non-literal-fs-filename:69:69","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"test/api/fileUploadSpec.ts","start_line":69},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-fs-filename","value":"eslint.detect-non-literal-fs-filename","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename"},{"type":"cwe","name":"CWE-22","value":"22","url":"https://cwe.mitre.org/data/definitions/22.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-fs-filename","value":"detect-non-literal-fs-filename"}]},{"id":"3462765988ce72bf0585d3a6efaf9c0d4fe9159c15299cf13da9e78e7127837a","category":"sast","name":"Improper limitation of a pathname to a restricted directory ('Path Traversal')","description":"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(\"Invalid path specified!\");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n","cve":"semgrep_id:eslint.detect-non-literal-fs-filename:75:75","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"test/api/profileImageUploadSpec.ts","start_line":75},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-fs-filename","value":"eslint.detect-non-literal-fs-filename","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename"},{"type":"cwe","name":"CWE-22","value":"22","url":"https://cwe.mitre.org/data/definitions/22.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-fs-filename","value":"detect-non-literal-fs-filename"}]},{"id":"e61b8276c3358759c915254af27d03585f1add43918dae7b51c5294690c62a5d","category":"sast","name":"Improper limitation of a pathname to a restricted directory ('Path Traversal')","description":"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(\"Invalid path specified!\");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n","cve":"semgrep_id:eslint.detect-non-literal-fs-filename:75:75","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"Gruntfile.js","start_line":75},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-fs-filename","value":"eslint.detect-non-literal-fs-filename","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename"},{"type":"cwe","name":"CWE-22","value":"22","url":"https://cwe.mitre.org/data/definitions/22.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-fs-filename","value":"detect-non-literal-fs-filename"}]},{"id":"068732dc1a83f8deb64f2035e72589cc776b79b8b54030c17d463bf4c3275ebe","category":"sast","name":"Improper limitation of a pathname to a restricted directory ('Path Traversal')","description":"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(\"Invalid path specified!\");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n","cve":"semgrep_id:eslint.detect-non-literal-fs-filename:79:79","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"routes/vulnCodeFixes.ts","start_line":79},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-fs-filename","value":"eslint.detect-non-literal-fs-filename","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename"},{"type":"cwe","name":"CWE-22","value":"22","url":"https://cwe.mitre.org/data/definitions/22.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-fs-filename","value":"detect-non-literal-fs-filename"}]},{"id":"47201486690cf6e032a4d75f86f06c87e5d877090ee95e3b85fcef919adbe155","category":"sast","name":"Improper limitation of a pathname to a restricted directory ('Path Traversal')","description":"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(\"Invalid path specified!\");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n","cve":"semgrep_id:eslint.detect-non-literal-fs-filename:80:80","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"routes/vulnCodeFixes.ts","start_line":80},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-fs-filename","value":"eslint.detect-non-literal-fs-filename","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename"},{"type":"cwe","name":"CWE-22","value":"22","url":"https://cwe.mitre.org/data/definitions/22.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-fs-filename","value":"detect-non-literal-fs-filename"}]},{"id":"7ac498b46bdc9664553d148b772546720f969eef1be23f417db2a5c37bf70be7","category":"sast","name":"Improper limitation of a pathname to a restricted directory ('Path Traversal')","description":"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(\"Invalid path specified!\");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n","cve":"semgrep_id:eslint.detect-non-literal-fs-filename:82:82","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"test/api/fileUploadSpec.ts","start_line":82},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-fs-filename","value":"eslint.detect-non-literal-fs-filename","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename"},{"type":"cwe","name":"CWE-22","value":"22","url":"https://cwe.mitre.org/data/definitions/22.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-fs-filename","value":"detect-non-literal-fs-filename"}]},{"id":"3532a0969ee4e3f4522151416a68b5d14123275c68d9375aa692acf2c7923a3b","category":"sast","name":"Improper limitation of a pathname to a restricted directory ('Path Traversal')","description":"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(\"Invalid path specified!\");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n","cve":"semgrep_id:eslint.detect-non-literal-fs-filename:84:84","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"test/api/memoryApiSpec.ts","start_line":84},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-fs-filename","value":"eslint.detect-non-literal-fs-filename","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename"},{"type":"cwe","name":"CWE-22","value":"22","url":"https://cwe.mitre.org/data/definitions/22.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-fs-filename","value":"detect-non-literal-fs-filename"}]},{"id":"8f71f69cc301ac2c25910ae1758bbbdabb5342eb1ea0ea0a26e1295f2509f849","category":"sast","name":"Improper limitation of a pathname to a restricted directory ('Path Traversal')","description":"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(\"Invalid path specified!\");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n","cve":"semgrep_id:eslint.detect-non-literal-fs-filename:93:93","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"routes/vulnCodeSnippet.ts","start_line":93},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-fs-filename","value":"eslint.detect-non-literal-fs-filename","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename"},{"type":"cwe","name":"CWE-22","value":"22","url":"https://cwe.mitre.org/data/definitions/22.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-fs-filename","value":"detect-non-literal-fs-filename"}]},{"id":"b2d4fe91143835805ea89f7c8a4fccb005d4c49898c733958ce072efd7b4829c","category":"sast","name":"Improper limitation of a pathname to a restricted directory ('Path Traversal')","description":"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(\"Invalid path specified!\");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n","cve":"semgrep_id:eslint.detect-non-literal-fs-filename:94:94","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"routes/vulnCodeSnippet.ts","start_line":94},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-fs-filename","value":"eslint.detect-non-literal-fs-filename","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename"},{"type":"cwe","name":"CWE-22","value":"22","url":"https://cwe.mitre.org/data/definitions/22.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-fs-filename","value":"detect-non-literal-fs-filename"}]},{"id":"3a742ee1e64d4e9b3e2b1c8155290020d0b71604d673d0f1c5d88f85801239fe","category":"sast","name":"Improper limitation of a pathname to a restricted directory ('Path Traversal')","description":"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(\"Invalid path specified!\");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n","cve":"semgrep_id:eslint.detect-non-literal-fs-filename:95:95","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"test/api/fileUploadSpec.ts","start_line":95},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-fs-filename","value":"eslint.detect-non-literal-fs-filename","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename"},{"type":"cwe","name":"CWE-22","value":"22","url":"https://cwe.mitre.org/data/definitions/22.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-fs-filename","value":"detect-non-literal-fs-filename"}]},{"id":"e885ad40df6ff72ec1a73e4400b3d3b9b25345eaadc96327ce2b1969a5bc389a","category":"sast","name":"Incorrect regular expression","description":"The `RegExp` constructor was called with a non-literal variable. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger\nbe responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular\nexpression should be\nhardcoded. If this is not possible, consider using an alternative regular expression engine\nsuch as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative that does not\nsupport backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n","cve":"semgrep_id:eslint.detect-non-literal-regexp:76:76","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"lib/codingChallenges.ts","start_line":76},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-regexp","value":"eslint.detect-non-literal-regexp","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"},{"type":"cwe","name":"CWE-185","value":"185","url":"https://cwe.mitre.org/data/definitions/185.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-regexp","value":"detect-non-literal-regexp"}]},{"id":"b0bede45e474fa8490ac7ffaa68f594005b70bee2e09e50e87e5031444d41c32","category":"sast","name":"Incorrect regular expression","description":"The `RegExp` constructor was called with a non-literal variable. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger\nbe responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular\nexpression should be\nhardcoded. If this is not possible, consider using an alternative regular expression engine\nsuch as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative that does not\nsupport backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n","cve":"semgrep_id:eslint.detect-non-literal-regexp:78:78","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"lib/codingChallenges.ts","start_line":78},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-regexp","value":"eslint.detect-non-literal-regexp","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"},{"type":"cwe","name":"CWE-185","value":"185","url":"https://cwe.mitre.org/data/definitions/185.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-regexp","value":"detect-non-literal-regexp"}]},{"id":"cf837a40fb7b65e77b7dbac5dff63629b3b0eac44442e9c15a2e0e74a51d4227","category":"sast","name":"Improper neutralization of directives in dynamically evaluated code ('Eval Injection')","description":"The application was found to dynamically import a module by calling `require` using a\nnon-literal string. An adversary might be able to read the first line of\narbitrary files. If they had write access to the file system, they may also be able to\nexecute arbitrary code.\n\nTo remediate this issue, use a hardcoded string literal when calling `require`. Never call it\nit with dynamically created variables or user-supplied data.\n","cve":"semgrep_id:eslint.detect-non-literal-require:49:51","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"cypress.config.ts","start_line":49,"end_line":51},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-non-literal-require","value":"eslint.detect-non-literal-require","url":"https://semgrep.dev/r/gitlab.eslint.detect-non-literal-require"},{"type":"cwe","name":"CWE-95","value":"95","url":"https://cwe.mitre.org/data/definitions/95.html"},{"type":"owasp","name":"A1:2017 - Injection","value":"A1:2017"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-non-literal-require","value":"detect-non-literal-require"}]},{"id":"9fbdfee4e2845d997e9ae726213b661e6b7f9f6ec9ed4bdab5461d0065085d74","category":"sast","name":"Observable timing discrepancy","description":"The application was found executing string comparisons using one of `===`, `!==`, `==` or `!=`\nagainst security sensitive values. String comparisons like this are not constant time, meaning\nthe\nfirst character found not to match in the two strings will immediately exit the conditional\nstatement.\nThis allows an adversary to calculate or observe small timing differences depending on the\nstrings\npassed to this comparison. This potentially allows an adversary the ability to brute force a\nstring\nthat will match the expected value by monitoring different character values.\n\nTo remediate this issue, use the `crypto.timingSafeEqual` method when comparing strings.\n\nExample using `crypto.timingSafeEqual` to safely compare strings:\n```\nfunction constantTimeIsPasswordEqual(userInput) {\n    // Retrieve the password from a secure data store such as a KMS or Hashicorp's vault.\n    const password = getPasswordFromSecureDataStore();\n    // Use crypto timingSafeEqual to ensure the comparison is done in constant time.\n    return crypto.timingSafeEqual(Buffer.from(userInput, 'utf-8'), Buffer.from(password,\n'utf-8'));\n}\n```\n\nFor more information on constant time comparison see:\n- https://nodejs.org/api/crypto.html#crypto_crypto_timingsafeequal_a_b\n","cve":"semgrep_id:eslint.detect-possible-timing-attacks:118:120","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"frontend/src/app/forgot-password/forgot-password.component.ts","start_line":118,"end_line":120},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-possible-timing-attacks","value":"eslint.detect-possible-timing-attacks","url":"https://semgrep.dev/r/gitlab.eslint.detect-possible-timing-attacks"},{"type":"cwe","name":"CWE-208","value":"208","url":"https://cwe.mitre.org/data/definitions/208.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-possible-timing-attacks","value":"detect-possible-timing-attacks"}]},{"id":"c3bdcfbc0c273275d3dd23ee08a493c53fe2686858029d1ba45f5e481c28c4ff","category":"sast","name":"Observable timing discrepancy","description":"The application was found executing string comparisons using one of `===`, `!==`, `==` or `!=`\nagainst security sensitive values. String comparisons like this are not constant time, meaning\nthe\nfirst character found not to match in the two strings will immediately exit the conditional\nstatement.\nThis allows an adversary to calculate or observe small timing differences depending on the\nstrings\npassed to this comparison. This potentially allows an adversary the ability to brute force a\nstring\nthat will match the expected value by monitoring different character values.\n\nTo remediate this issue, use the `crypto.timingSafeEqual` method when comparing strings.\n\nExample using `crypto.timingSafeEqual` to safely compare strings:\n```\nfunction constantTimeIsPasswordEqual(userInput) {\n    // Retrieve the password from a secure data store such as a KMS or Hashicorp's vault.\n    const password = getPasswordFromSecureDataStore();\n    // Use crypto timingSafeEqual to ensure the comparison is done in constant time.\n    return crypto.timingSafeEqual(Buffer.from(userInput, 'utf-8'), Buffer.from(password,\n'utf-8'));\n}\n```\n\nFor more information on constant time comparison see:\n- https://nodejs.org/api/crypto.html#crypto_crypto_timingsafeequal_a_b\n","cve":"semgrep_id:eslint.detect-possible-timing-attacks:80:82","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"frontend/src/app/change-password/change-password.component.ts","start_line":80,"end_line":82},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-possible-timing-attacks","value":"eslint.detect-possible-timing-attacks","url":"https://semgrep.dev/r/gitlab.eslint.detect-possible-timing-attacks"},{"type":"cwe","name":"CWE-208","value":"208","url":"https://cwe.mitre.org/data/definitions/208.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-possible-timing-attacks","value":"detect-possible-timing-attacks"}]},{"id":"a9c4e522c0b1a2004c532871322c9c7f0ba839f8cb04690abbd5c0f9ced88551","category":"sast","name":"Observable timing discrepancy","description":"The application was found executing string comparisons using one of `===`, `!==`, `==` or `!=`\nagainst security sensitive values. String comparisons like this are not constant time, meaning\nthe\nfirst character found not to match in the two strings will immediately exit the conditional\nstatement.\nThis allows an adversary to calculate or observe small timing differences depending on the\nstrings\npassed to this comparison. This potentially allows an adversary the ability to brute force a\nstring\nthat will match the expected value by monitoring different character values.\n\nTo remediate this issue, use the `crypto.timingSafeEqual` method when comparing strings.\n\nExample using `crypto.timingSafeEqual` to safely compare strings:\n```\nfunction constantTimeIsPasswordEqual(userInput) {\n    // Retrieve the password from a secure data store such as a KMS or Hashicorp's vault.\n    const password = getPasswordFromSecureDataStore();\n    // Use crypto timingSafeEqual to ensure the comparison is done in constant time.\n    return crypto.timingSafeEqual(Buffer.from(userInput, 'utf-8'), Buffer.from(password,\n'utf-8'));\n}\n```\n\nFor more information on constant time comparison see:\n- https://nodejs.org/api/crypto.html#crypto_crypto_timingsafeequal_a_b\n","cve":"semgrep_id:eslint.detect-possible-timing-attacks:93:95","severity":"Medium","scanner":{"id":"semgrep","name":"Semgrep"},"location":{"file":"frontend/src/app/register/register.component.ts","start_line":93,"end_line":95},"identifiers":[{"type":"semgrep_id","name":"eslint.detect-possible-timing-attacks","value":"eslint.detect-possible-timing-attacks","url":"https://semgrep.dev/r/gitlab.eslint.detect-possible-timing-attacks"},{"type":"cwe","name":"CWE-208","value":"208","url":"https://cwe.mitre.org/data/definitions/208.html"},{"type":"eslint_rule_id","name":"ESLint rule ID/detect-possible-timing-attacks","value":"detect-possible-timing-attacks"}]}],"dependency_files":[],"scan":{"analyzer":{"id":"semgrep","name":"Semgrep","url":"https://gitlab.com/gitlab-org/security-products/analyzers/semgrep","vendor":{"name":"GitLab"},"version":"4.4.14"},"scanner":{"id":"semgrep","name":"Semgrep","url":"https://github.com/returntocorp/semgrep","vendor":{"name":"GitLab"},"version":"1.41.0"},"type":"sast","start_time":"2023-09-28T15:41:58","end_time":"2023-09-28T15:42:19","status":"success"}}
